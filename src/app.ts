import express from 'express';
import config from './config';
import apiRoutes from './routes';
import bodyParser from 'body-parser';

const app = express();

app.use(bodyParser.json());

app.use(apiRoutes);

const server = app.listen(config.APP_PORT, config.APP_HOST, () => {
  console.info('Server started');
});

// shut down server
const shutdown = () => {
  server.close((err) => {
    if (err) {
      // eslint-disable-next-line no-console
      console.error(err);
      process.exitCode = 1;
    }
    process.exit();
  });
};

// This signal interrupts a process immediately.
// The default action of this signal is to terminate a process gracefully .
// It can be handled , ignored or caught.
// It can be sent from a terminal as input characters.
// This signal is generated when a user presses Ctrl+C.
process.on('SIGINT', () => {
  // eslint-disable-next-line no-console
  console.info('Got SIGINT (aka ctrl-c in docker). Graceful shutdown ', new Date().toISOString());
  shutdown();
});

// This signal terminates a process immediately.
// This can also be handled ,ignored.
// This is also used for graceful termination of a process.
// The only difference is that It is generated by shell command kill by default.
process.on('SIGTERM', () => {
  // eslint-disable-next-line no-console
  console.info('Got SIGTERM (docker container stop). Graceful shutdown ', new Date().toISOString());
  shutdown();
});

export default app;
